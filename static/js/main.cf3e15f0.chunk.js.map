{"version":3,"sources":["App.js","index.js"],"names":["getWord","index","Math","floor","random","wordList","length","toLowerCase","Word","word","validKeys","joinedKeys","join","matched","slice","remainder","className","App","useState","typedKeys","setTypedKeys","setValidKeys","completedWords","setCompletedWords","setWord","useEffect","wordFromValidKeys","newWord","includes","prev","tabIndex","onKeyDown","e","preventDefault","key","MAX_TYPED_KEYS","split","isValidKey","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAKMA,EAAU,WACZ,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWC,EAASC,QAElD,OADaD,EAASJ,GACVM,eASVC,EAAO,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAEjB,IAAID,EAAM,OAAO,KACjB,IAAME,EAAaD,EAAUE,KAAK,IAC5BC,EAAUJ,EAAKK,MAAM,EAAGH,EAAWL,QACnCS,EAAYN,EAAKK,MAAMH,EAAWL,QAExC,OACA,qCACI,sBAAMU,UAAU,UAAhB,SAA2BH,IAC3B,sBAAMG,UAAU,YAAhB,SAA6BD,QAuEtBE,EAlEH,WAAO,IAAD,EAEoBC,mBAAS,IAF7B,mBAEPC,EAFO,KAEIC,EAFJ,OAGoBF,mBAAS,IAH7B,mBAGPR,EAHO,KAGIW,EAHJ,OAI8BH,mBAAS,IAJvC,mBAIPI,EAJO,KAISC,EAJT,OAKUL,mBAAS,IALnB,mBAKPT,EALO,KAKDe,EALC,KAQdC,qBAAU,WACND,EAAQxB,OACT,IAEHyB,qBAAU,WACN,IAAMC,EAAoBhB,EAAUE,KAAK,IAAIL,cAC7C,GAAGE,GAAQA,IAASiB,EAAmB,CACnC,IAAIC,EAAU,KAEd,GACIA,EAAU3B,UACPsB,EAAeM,SAASD,IAE/BH,EAAQG,GACRN,EAAa,IACbE,GAAkB,SAACM,GAAD,4BAAcA,GAAd,CAAoBpB,UAG3C,CAACA,EAAMC,EAAWY,IAqBrB,OACI,sBAAKN,UAAU,YAAYc,SAAS,IAAIC,UApBtB,SAACC,GACnBA,EAAEC,iBADuB,IAEjBC,EAAQF,EAARE,IAERd,GAAa,SAACS,GAAD,MAAU,sBAAIA,GAAJ,CAAUK,IAAKpB,OAAMqB,OArDjC,SAACD,EAAKzB,GACrB,QAAIA,GACWA,EAAK2B,MAAM,IAAIR,SAASM,GAqDhCG,CAAWH,EAAKzB,IACfY,GAAa,SAACQ,GAGV,OAFsBA,EAAKvB,QAAUG,EAAKH,QACNG,EAAKoB,EAAKvB,UAAY4B,EACnD,sBAAmBL,GAAnB,CAAyBK,IAAOL,MAU/C,UACI,qBAAKb,UAAU,aAAf,SACI,cAAC,EAAD,CAAMP,KAAMA,EAAMC,UAAWA,MAEjC,qBAAKM,UAAU,aAAf,SACKG,EAAYA,EAAUP,KAAK,KAAO,OAEvC,qBAAKI,UAAU,kBAAf,SACI,6BACKM,EAAegB,KAAI,SAAC7B,GACjB,OAAQ,6BAAgBA,GAAPA,cCrFzC8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.cf3e15f0.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport wordList from './resources/words.json'\r\n\r\nconst MAX_TYPED_KEYS = 30;\r\n\r\nconst getWord = () => {\r\n    const index = Math.floor(Math.random() * wordList.length);\r\n    const word = wordList[index];\r\n    return word.toLowerCase();\r\n}\r\n\r\nconst isValidKey = (key, word) => {\r\n    if(!word) return false;\r\n    const result = word.split('').includes(key);\r\n    return result;\r\n}\r\n\r\nconst Word = ({word, validKeys}) => {\r\n\r\n    if(!word) return null;\r\n    const joinedKeys = validKeys.join('');\r\n    const matched = word.slice(0, joinedKeys.length);\r\n    const remainder = word.slice(joinedKeys.length);\r\n\r\n    return(\r\n    <>\r\n        <span className=\"matched\">{matched}</span>\r\n        <span className=\"remainder\">{remainder}</span>\r\n    </>\r\n    );\r\n}\r\n\r\nconst App = () => {\r\n\r\n    const [typedKeys, setTypedKeys] = useState([]);\r\n    const [validKeys, setValidKeys] = useState([]);\r\n    const [completedWords, setCompletedWords] = useState([]);\r\n    const [word, setWord] = useState('');\r\n\r\n\r\n    useEffect(() => {\r\n        setWord(getWord());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const wordFromValidKeys = validKeys.join('').toLowerCase();\r\n        if(word && word === wordFromValidKeys) {\r\n            let newWord = null;\r\n\r\n            do {\r\n                newWord = getWord();\r\n            }while(completedWords.includes(newWord));\r\n        \r\n            setWord(newWord);\r\n            setValidKeys([]);\r\n            setCompletedWords((prev) => [...prev, word]);\r\n        }\r\n\r\n    }, [word, validKeys, completedWords]);\r\n\r\n    const handleKeyDown = (e) => {\r\n        e.preventDefault();\r\n        const { key } = e;\r\n\r\n        setTypedKeys((prev) => [...prev, key].slice(MAX_TYPED_KEYS * -1));\r\n        \r\n        if(isValidKey(key, word)) {\r\n            setValidKeys((prev) => {\r\n                const isValidLength = prev.length <= word.length;\r\n                const isNextChar = isValidLength && word[prev.length] === key;\r\n                return (isNextChar) ? [...prev, key] : prev;\r\n            });\r\n        }\r\n\r\n\r\n\r\n        \r\n    }\r\n\r\n    return(\r\n        <div className=\"container\" tabIndex=\"0\" onKeyDown={handleKeyDown}>\r\n            <div className=\"valid-keys\">\r\n                <Word word={word} validKeys={validKeys} />\r\n            </div>\r\n            <div className=\"typed-keys\">\r\n                {typedKeys ? typedKeys.join(' ') : null}\r\n            </div>\r\n            <div className=\"completed-words\">\r\n                <ol>\r\n                    {completedWords.map((word) => {\r\n                        return (<li key={word}>{word}</li>)\r\n                    })}\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}